import os
from pathlib import Path

import torch
from PIL import Image
from torch.utils.data import Dataset

from utils.consts import IMAGES_FOLDER_PATH

targets = [2, 3, 3, 6, 7, 8, 10, 12, 16, 17, 18, 19, 22, 23, 24, 26, 27, 28, 29, 30, 32, 32, 37, 39, 42, 44, 44, 48, 49,
           51, 55, 56, 57, 57, 57, 57, 61, 62, 63, 64, 64, 64, 66, 66, 67, 69, 69, 69, 71, 71, 71, 72, 74, 77, 77, 77,
           78, 78, 80, 81, 81, 81, 81, 83, 83, 84, 84, 86, 87, 88, 88, 88, 89, 90, 90, 93, 93, 93, 94, 95, 96, 96, 97,
           98, 100, 100, 101, 101, 103, 104, 105, 107, 107, 108, 108, 108, 108, 109, 110, 110, 111, 111, 112, 112, 114,
           118, 119, 121, 121, 121, 122, 126, 126, 126, 127, 128, 128, 129, 130, 131, 132, 133, 133, 133, 134, 134, 136,
           136, 137, 137, 138, 140, 141, 141, 144, 145, 145, 146, 147, 147, 148, 148, 151, 151, 154, 154, 155, 155, 155,
           156, 159, 159, 159, 161, 161, 161, 163, 164, 164, 165, 165, 166, 169, 170, 171, 174, 176, 177, 177, 181, 182,
           182, 184, 187, 188, 188, 189, 190, 191, 191, 191, 192, 195, 195, 196, 197, 197, 198, 199, 199, 199, 201, 201,
           201, 202, 202, 203, 203, 204, 204, 204, 205, 206, 206, 206, 206, 208, 209, 209, 209, 211, 213, 214, 214, 215,
           216, 216, 216, 217, 219, 219, 219, 219, 222, 223, 225, 225, 226, 228, 228, 231, 232, 232, 234, 234, 238, 238,
           239, 241, 241, 247, 248, 248, 249, 250, 251, 251, 252, 253, 254, 254, 254, 255, 255, 255, 256, 259, 259, 261,
           261, 263, 263, 267, 268, 271, 271, 272, 272, 272, 272, 272, 273, 274, 275, 275, 280, 281, 281, 281, 284, 284,
           285, 285, 286, 289, 291, 292, 293, 294, 295, 297, 297, 297, 298, 299, 300, 301, 302, 303, 306, 307, 307, 308,
           310, 310, 310, 311, 311, 312, 312, 314, 314, 314, 314, 319, 319, 320, 320, 321, 322, 323, 323, 325, 325, 325,
           326, 328, 329, 330, 330, 331, 332, 332, 334, 334, 335, 336, 337, 338, 338, 339, 339, 341, 342, 343, 344, 344,
           345, 345, 346, 346, 346, 346, 347, 348, 350, 350, 351, 351, 351, 353, 354, 355, 358, 358, 362, 362, 363, 364,
           364, 365, 367, 368, 368, 369, 371, 371, 372, 372, 372, 374, 374, 374, 374, 376, 377, 378, 379, 379, 381, 381,
           383, 384, 386, 387, 387, 389, 392, 393, 394, 394, 395, 395, 395, 399, 399, 400, 400, 403, 404, 404, 404, 405,
           406, 406, 407, 407, 409, 410, 411, 412, 412, 412, 414, 414, 414, 415, 417, 417, 418, 418, 418, 420, 421, 421,
           422, 423, 424, 425, 426, 426, 427, 428, 429, 429, 432, 435, 437, 437, 443, 444, 446, 447, 448, 448, 449, 452,
           454, 455, 456, 457, 458, 458, 458, 460, 460, 460, 460, 460, 461, 461, 462, 462, 462, 464, 464, 465, 466, 469,
           470, 472, 472, 473, 473, 473, 474, 476, 477, 478, 480, 480, 480, 481, 484, 485, 486, 487, 487, 489, 489, 489,
           489, 490, 490, 491, 491, 491, 492, 492, 493, 493, 496, 497, 498, 499, 499, 500, 500, 500, 500, 501, 501, 503,
           503, 503, 505, 506, 506, 508, 508, 509, 509, 510, 510, 513, 515, 515, 519, 520, 521, 522, 523, 526, 527, 530,
           530, 531, 532, 534, 535, 535, 538, 538, 541, 542, 542, 543, 543, 544, 546, 548, 548, 549, 549, 550, 552, 552,
           552, 552, 553, 555, 556, 556, 557, 557, 559, 560, 560, 562, 564, 564, 564, 566, 567, 569, 569, 569, 570, 570,
           570, 570, 571, 571, 572, 572, 573, 575, 578, 579, 579, 579, 580, 581, 582, 583, 585, 586, 587, 587, 588, 589,
           589, 590, 591, 592, 593, 596, 597, 597, 598, 599, 600, 600, 600, 601, 602, 603, 604, 605, 608, 608, 608, 609,
           609, 610, 613, 617, 617, 617, 618, 619, 620, 622, 625, 625, 626, 627, 628, 628, 628, 629, 630, 631, 631, 631,
           632, 632, 634, 635, 635, 635, 636, 639, 639, 639, 641, 641, 644, 645, 647, 648, 648, 650, 650, 650, 652, 652,
           654, 658, 659, 660, 661, 661, 663, 663, 664, 666, 667, 669, 670, 670, 672, 672, 672, 675, 679, 679, 679, 681,
           683, 683, 683, 689, 690, 690, 691, 692, 694, 695, 695, 695, 697, 699, 699, 699, 699, 701, 701, 703, 703, 705,
           705, 706, 707, 708, 709, 713, 716, 716, 717, 718, 719, 721, 722, 725, 725, 726, 726, 727, 727, 729, 730, 730,
           732, 732, 732, 732, 733, 733, 737, 741, 742, 743, 743, 744, 744, 744, 747, 748, 748, 749, 750, 750, 752, 754,
           754, 756, 756, 757, 757, 758, 758, 758, 759, 760, 762, 764, 765, 766, 767, 768, 769, 772, 775, 776, 776, 777,
           777, 778, 783, 783, 784, 784, 787, 787, 788, 788, 789, 789, 791, 791, 793, 795, 795, 797, 797, 798, 798, 798,
           799, 800, 801, 803, 803, 804, 805, 806, 807, 807, 808, 811, 813, 816, 817, 821, 821, 821, 822, 822, 823, 824,
           826, 827, 828, 829, 831, 833, 833, 835, 836, 836, 837, 838, 839, 839, 844, 845, 846, 846, 847, 848, 850, 851,
           853, 854, 857, 858, 861, 861, 862, 862, 864, 864, 864, 866, 867, 867, 867, 868, 868, 869, 871, 871, 872, 872,
           873, 874, 875, 875, 876, 876, 877, 877, 879, 882, 883, 884, 886, 886, 887, 887, 887, 889, 890, 890, 890, 891,
           891, 891, 892, 892, 894, 894, 894, 895, 897, 897, 898, 899, 899, 900, 901, 902, 902, 904, 904, 904, 904, 905,
           908, 908, 909, 910, 912, 914, 914, 914, 916, 918, 921, 922, 927, 929, 930, 930, 932, 933, 933, 934, 935, 936,
           936, 936, 937, 937, 938, 940, 944, 945, 947, 948, 949, 950, 950, 950, 952, 953, 956, 956, 957, 959, 961, 964,
           964, 964, 964, 965, 966, 966, 967, 967, 970, 970, 971, 972, 973, 973, 974, 974, 976, 976, 976, 976, 976, 979,
           979, 984, 985, 985, 985, 986, 986, 987, 988, 990, 990, 992, 992, 996, 998]


class ImageNetDataset(Dataset):

    def __init__(self, root_dir: Path = IMAGES_FOLDER_PATH, transform=None):
        self.targets = targets
        self.root_dir = root_dir
        self.transform = transform
        self.listdir = os.listdir(root_dir)

    def __len__(self):
        return len(self.listdir)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.item()

        # image_name = f'{str(self.listdir[idx]).zfill(8)}'
        image_name = f'{str(idx).zfill(8)}.JPEG'
        image_path = Path(self.root_dir, image_name)
        image = Image.open(image_path)

        if self.transform:
            image = self.transform(image)
        return image, self.targets[self.listdir.index(f'{str(idx).zfill(8)}.JPEG')]
